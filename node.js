const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const app = express();
const fs = require('fs');
const cron = require('node-cron');

// === –¢–í–û–ô TOKEN ===
const TOKEN = '8179494735:AAHH3-kzojS4oWcH5XVi6H7a-rjLofpap2k';
const URL = 'https://srv-d3ohdfmr433s73a3mv6g.onrender.com'; // —Ç–≤—ñ–π Render URL

// === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ===
const bot = new TelegramBot(TOKEN);
bot.setWebHook(`${URL}/bot${TOKEN}`);

// === Express middleware ===
app.use(express.json());

// === –û–±—Ä–æ–±–∫–∞ webhook ===
app.post(`/bot${TOKEN}`, (req, res) => {
  console.log('üì© Webhook –æ—Ç—Ä–∏–º–∞–Ω–æ!');
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// === –¢–µ—Å—Ç–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç ===
app.get('/', (req, res) => res.send('‚úÖ Bot server is running!'));

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server started on port ${PORT}`);
  sendStartupTestMessage();
});

// === –î–∞–Ω—ñ ===
const data = require('./balance_data.js');
let day = 60;
let chatIdUser = null;
let history = [];

// === –Ø–∫—â–æ chatId –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π ‚Äî –±–µ—Ä–µ–º–æ –π–æ–≥–æ ===
if (fs.existsSync('chatId.txt')) {
  chatIdUser = fs.readFileSync('chatId.txt', 'utf8').trim();
  console.log(`üíæ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ chatId: ${chatIdUser}`);
}

// === –§—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
function sendStartupTestMessage() {
  if (chatIdUser) {
    bot.sendMessage(chatIdUser, 'üü¢ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ —ñ –ø—Ä–∞—Ü—é—î ‚úÖ', { parse_mode: 'HTML' });
  } else {
    console.log('‚ö†Ô∏è Chat ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ /start —É Telegram.');
  }
}

// === –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–Ω—è ===
function getDayMessage(day) {
  const today = data[day];
  const yesterday = data[day - 1] || today;
  const diff = today - yesterday;

  return `–î–µ–Ω—å - ${day}
<b>–ë–∞–ª–∞–Ω—Å:</b> $${today.toFixed(2)}
<b>–¶—ñ–ª—å:</b> $${diff.toFixed(2)}
üöÄ +1 –¥–µ–Ω—å –±–ª–∏–∂—á–µ –¥–æ –º–µ—Ç–∏!`;
}

// === –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start ===
bot.onText(/\/start/, (msg) => {
  chatIdUser = msg.chat.id;
  fs.writeFileSync('chatId.txt', String(chatIdUser));
  console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ chatId: ${chatIdUser}`);

  bot.sendMessage(chatIdUser, getDayMessage(day), {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [[{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: 'done' }]],
    },
  });
});

// === –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ" ===
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  if (query.data === 'done') {
    bot.sendMessage(chatId, '‚úÖ –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ!\n<b>–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑–∞–≤—Ç—Ä–∞ üëã</b>', { parse_mode: 'HTML' });
    day += 1;
  }
});

// === Cron (–∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É –¥–ª—è —Ç–µ—Å—Ç—É) ===
cron.schedule('0 8 * * *', () => {
  if (chatIdUser && data.hasOwnProperty(day)) {
    bot.sendMessage(chatIdUser, getDayMessage(day), { parse_mode: 'HTML' });
  } else {
    console.log('‚ö†Ô∏è –ù–µ–º–∞—î chatId –∞–±–æ –¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
  }
}, { timezone: 'Europe/Kyiv' });
