const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const fs = require('fs');
const data = require('./balance_data.js'); // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ –±–∞–ª–∞–Ω—Å–∞–º–∏

// ====== –¢–í–û–á –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ======
const TOKEN = '8179494735:AAHH3-kzojS4oWcH5XVi6H7a-rjLofpap2k';
const bot = new TelegramBot(TOKEN, { polling: true }); // ‚úÖ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ polling

let chatIdUser = null;
if (fs.existsSync('chatId.txt')) {
  chatIdUser = fs.readFileSync('chatId.txt', 'utf8').trim();
}

let day = 60; // –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –¥–µ–Ω—å
let history = [];

// ------------------ –§—É–Ω–∫—Ü—ñ—ó ------------------
function getDayMessage(day) {
  const todayBalance = data[day];
  const yesterdayBalance = data[day - 1] || todayBalance;
  const dailyProfit = todayBalance - yesterdayBalance;

  return `üìÖ <b>–î–µ–Ω—å:</b> ${day}\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <b>$${todayBalance.toFixed(2)}</b>\nüéØ <b>–ó–∞—Ä–æ–±—ñ—Ç–æ–∫ –∑–∞ –¥–µ–Ω—å:</b> <b>$${dailyProfit.toFixed(2)}</b>\nüöÄ +1 –¥–µ–Ω—å –±–ª–∏–∂—á–µ –¥–æ –º–µ—Ç–∏!`;
}

// ------------------ /start ------------------
bot.onText(/\/start/, (msg) => {
  chatIdUser = msg.chat.id;
  fs.writeFileSync('chatId.txt', String(chatIdUser)); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ chat id
  bot.sendMessage(chatIdUser, getDayMessage(day), {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [[{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: 'done' }]],
    },
  });
});

// ------------------ /history ------------------
bot.onText(/\/history/, (msg) => {
  const chatId = msg.chat.id;
  if (history.length === 0) {
    bot.sendMessage(chatId, '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è');
  } else {
    const text = history
      .map((h) => `üìÖ –î–µ–Ω—å ${h.day}: $${data[h.day].toFixed(2)}`)
      .join('\n');
    bot.sendMessage(chatId, text);
  }
});

// ------------------ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚úÖ ------------------
bot.on('callback_query', (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;

  if (callbackQuery.data === 'done') {
    history.push({ day, balance: data[day] });

    if (data.hasOwnProperty(day + 1)) {
      bot.editMessageText("‚úÖ –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ!\n<b>–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑–∞–≤—Ç—Ä–∞ üëã</b>", {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: 'HTML',
      });

      day += 1; // –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
    } else {
      bot.editMessageText("üéâ –í—Å—ñ –¥–Ω—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ñ—Ç–∞—é! üöÄ", {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: 'HTML',
      });
    }
  }
});

// ------------------ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ------------------
cron.schedule(
  '0 8 * * *', // –∫–æ–∂–µ–Ω –¥–µ–Ω—å –æ 8:00 —Ä–∞–Ω–∫—É
  () => {
    if (chatIdUser && data.hasOwnProperty(day)) {
      const opts = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: 'done' }]],
        },
      };
      bot.sendMessage(chatIdUser, getDayMessage(day), opts);
      console.log(`üì® –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å ${day}`);
    } else {
      console.log('‚ö†Ô∏è –ù–µ–º–∞—î chatId –∞–±–æ –¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
  },
  {
    scheduled: true,
    timezone: 'Europe/Kyiv',
  }
);

console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É —Ä–µ–∂–∏–º—ñ polling');

