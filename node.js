const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const app = express();
const cron = require('node-cron');
const fs = require('fs');

const TOKEN = '8179494735:AAHH3-kzojS4oWcH5XVi6H7a-rjLofpap2k';
const bot = new TelegramBot(TOKEN); // webhook mode -> –±–µ–∑ polling
const data = require('./balance_data.js'); // –æ–±'—î–∫—Ç –∑ –±–∞–ª–∞–Ω—Å–∞–º–∏

let chatIdUser = null;
if (fs.existsSync('chatId.txt')) {
  chatIdUser = fs.readFileSync('chatId.txt', 'utf8').trim();
}

// ---------- EXPRESS + WEBHOOK ----------
app.use(express.json());

// –º–∞—Ä—à—Ä—É—Ç –ø–æ–≤–∏–Ω–µ–Ω —Ç–æ—á–Ω–æ —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏ –∑ —Ç–∏–º, —â–æ –≤ setWebhook
app.post(`/${TOKEN}`, (req, res) => {
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (err) {
    console.error('processUpdate error:', err);
    res.sendStatus(500);
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Bot running on port ${PORT}`);

  // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook ‚Äî –∑–∞–º—ñ–Ω–∏ YOUR_RENDER_URL –Ω–∞ —Å–≤—ñ–π render URL (–±–µ–∑ —Å–ª–µ—à–∞ –≤ –∫—ñ–Ω—Ü—ñ)
  // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: https://my-bot-abc.onrender.com
  const RENDER_URL = 'https://bot.onrender.com';
  const webhookUrl = `${RENDER_URL}/${TOKEN}`;
  bot.setWebHook(webhookUrl)
    .then(() => console.log('Webhook set to', webhookUrl))
    .catch(err => console.error('Failed to set webhook:', err));
});

// ------------------ –õ–æ–≥—ñ–∫–∞ –±–æ—Ç–∞ ------------------
let day = 1;
let history = [];

function getDayMessage(day) {
  const todayBalance = data[String(day)];
  const yesterdayBalance = data[String(day - 1)]  data[String(0)]  0;
  const dailyProfit = todayBalance - yesterdayBalance;

  return `–î–µ–Ω—å - ${day}
–ë–∞–ª–∞–Ω—Å:   $${todayBalance.toFixed(2)}
–ü—Ä–∏–±—É—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ:  $${dailyProfit.toFixed(2)}
üöÄ +1 –¥–µ–Ω—å –±–ª–∏–∂—á–µ –¥–æ –º–µ—Ç–∏!`;
}

// /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  chatIdUser = chatId;
  fs.writeFileSync('chatId.txt', String(chatId));
  bot.sendMessage(chatId, getDayMessage(day), {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [[{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: 'done' }]]
    }
  });
});

// /history
bot.onText(/\/history/, (msg) => {
  const chatId = msg.chat.id;
  if (history.length === 0) {
    bot.sendMessage(chatId, '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è');
    return;
  }
  const text = history.map(h => `–î–µ–Ω—å ${h.day}: $${data[String(h.day)].toFixed(2)}`);
  bot.sendMessage(chatId, text);
});

// callback_query
bot.on('callback_query', (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;

  if (callbackQuery.data === 'done') {
    history.push({ day, balance: data[String(day)] });

    if (data.hasOwnProperty(String(day + 1))) {
      bot.editMessageText("‚úÖ –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ!\n<b>–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑–∞–≤—Ç—Ä–∞ üëã</b>", {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: 'HTML'
      });
      day += 1;
    } else {
      bot.editMessageText("üéâ –í—Å—ñ –¥–Ω—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ñ—Ç–∞—é! üöÄ", {
        chat_id: chatId,
        message_id: msg.message_id,
        parse_mode: 'HTML'
      });
    }
  }
});

// CRON (–ø–æ–∫–∏ —â–æ —â–æ—Ö–≤–∏–ª–∏–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É)
cron.schedule('*/1 * * * *', () => {
  if (!chatIdUser) {
    console.log('‚ö†Ô∏è –ù–µ–º–∞—î chatId ‚Äî –Ω–∞–ø–∏—à–∏ /start —É –±–æ—Ç–∞');
    return;
  }
  if (!data.hasOwnProperty(String(day))) {
    console.log('‚ö†Ô∏è –î–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ data:', day);
    return;
  }
  const opts = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [[{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: 'done' }]]
    }
  };
  bot.sendMessage(chatIdUser, getDayMessage(day), opts);
}, {
  timezone: 'Europe/Kyiv'
});


