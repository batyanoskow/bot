const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const fs = require('fs');
const app = express();

// ------------------ ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ------------------
const TOKEN = '8179494735:AAHH3-kzojS4oWcH5XVi6H7a-rjLofpap2k';
const URL = 'https://srv-d3ohdfmr433s73a3mv6g.onrender.com'; // üîó —Ç–≤—ñ–π Render URL
const PORT = process.env.PORT || 3000;

const data = require('./balance_data.js');
let chatIdUser = null;
if (fs.existsSync('chatId.txt')) {
    chatIdUser = fs.readFileSync('chatId.txt', 'utf8').trim();
}

let day = 1;
let history = [];

// ------------------ üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ------------------
const bot = new TelegramBot(TOKEN);
bot.setWebHook(`${URL}/bot${TOKEN}`);

app.use(express.json());
app.post(`/bot${TOKEN}`, (req, res) => {
    console.log("webhook +++");
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

app.get('/', (req, res) => {
    res.send('‚úÖ Bot is live on Render!');
});

app.listen(PORT, () => console.log(`‚úÖ Server started on ${PORT}`));

// ------------------ üìÖ –õ–æ–≥—ñ–∫–∞ ------------------
function getDayMessage(day) {
    const todayBalance = data[day];
    const yesterdayBalance = data[day - 1] || 0;
    const dailyProfit = todayBalance - yesterdayBalance;

    return `–î–µ–Ω—å <b>${day}</b>\n +
           –ë–∞–ª–∞–Ω—Å: <b>$${todayBalance.toFixed(2)}</b>\n +
           –ü—Ä–∏—Ä—ñ—Å—Ç: <b>$${dailyProfit.toFixed(2)}</b>\n +
           üöÄ +1 –¥–µ–Ω—å –±–ª–∏–∂—á–µ –¥–æ –º–µ—Ç–∏!`;
}

// ------------------ üß≠ –ö–æ–º–∞–Ω–¥–∏ ------------------
bot.onText(/\/start/, (msg) => {
    chatIdUser = msg.chat.id;
    fs.writeFileSync('chatId.txt', String(chatIdUser));

    bot.sendMessage(chatIdUser, getDayMessage(day), {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [[{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: 'done' }]]
        }
    });
});

bot.onText(/\/history/, (msg) => {
    if (history.length === 0) {
        bot.sendMessage(msg.chat.id, '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è');
    } else {
        const text = history.map(h => `–î–µ–Ω—å ${h.day}: $${data[h.day].toFixed(2)}`).join('\n');
        bot.sendMessage(msg.chat.id, text);
    }
});

// ------------------ ‚úÖ –ö–Ω–æ–ø–∫–∞ "–í–∏–∫–æ–Ω–∞–Ω–æ" ------------------
bot.on('callback_query', (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;

    if (callbackQuery.data === 'done') {
        history.push({ day, balance: data[day] });

        if (data.hasOwnProperty(day + 1)) {
            bot.editMessageText("‚úÖ –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ!\n<b>–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑–∞–≤—Ç—Ä–∞ üëã</b>", {
                chat_id: chatId,
                message_id: msg.message_id,
                parse_mode: 'HTML'
            });
            day += 1;
        } else {
            bot.editMessageText("üéâ –í—Å—ñ –¥–Ω—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ñ—Ç–∞—é! üöÄ", {
                chat_id: chatId,
                message_id: msg.message_id,
                parse_mode: 'HTML'
            });
        }
    }
});

// ------------------ ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ------------------
cron.schedule('0 8 * * *', () => {
    if (chatIdUser && data.hasOwnProperty(day)) {
        bot.sendMessage(chatIdUser, getDayMessage(day), {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: 'done' }]]
            }
        });
    } else {
        console.log("‚ö†Ô∏è –ù–µ–º–∞—î chatId –∞–±–æ –¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
}, {
    scheduled: true,
    timezone: "Europe/Kyiv"
});


