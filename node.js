const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const app = express();
const bot = new TelegramBot(TOKEN);
const cron = require('node-cron'); // –Ω–µ –∑–∞–±—É–¥—å npm install node-cron
const fs = require('fs');
const data = require('./balance_data.js'); // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ–±‚Äô—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏

let chatIdUser = null;

if (fs.existsSync('chatId.txt')) {
    chatIdUser = fs.readFileSync('chatId.txt', 'utf8').trim();
}
const growth_list = require('./balance_data.js')

// ------------------ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ------------------
const TOKEN = '8179494735:AAHH3-kzojS4oWcH5XVi6H7a-rjLofpap2k'; 
bot.setWebHook(`https://api.render.com/deploy/srv-d3ohdfmr433s73a3mv6g?key=iHvHIf0DJ0s`);

app.use(express.json());
app.post(`/${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ Bot running on port ${PORT}`));


let day = 1;
let history = [];

// ------------------ –§—É–Ω–∫—Ü—ñ—ó ------------------
function getDayMessage(day) {
    const todayBalance = data[day];
    const yesterdayBalance = data[day - 1];
    const dailyProfit = todayBalance - yesterdayBalance;

    return `–î–µ–Ω—å - ${day}
–ë–∞–ª–∞–Ω—Å:   $${todayBalance.toFixed(2)}
–¶—ñ–ª—å:  $${dailyProfit.toFixed(2)}
üöÄ +1 –¥–µ–Ω—å –±–ª–∏–∂—á–µ –¥–æ –º–µ—Ç–∏!`
}

// ------------------ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ ------------------
bot.onText(/\/start/, (msg) => {
    chatIdUser = msg.chat.id;
    fs.writeFileSync('chatId.txt', String(chatIdUser)); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ ID
    bot.sendMessage(chatIdUser, getDayMessage(day), {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [[{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: 'done' }]]
        }
    });
});

bot.onText(/\/history/, (msg) => {
    const chatId = msg.chat.id;
    if (history.length === 0) {
        bot.sendMessage(chatId, '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è');
    } else {
        let text = history
            .map(h => `–î–µ–Ω—å ${h.day}: $${data[h.day].toFixed(2)}`)
            .join('\n');
        bot.sendMessage(chatId, text);
    }
});

// ------------------ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚úÖ ------------------
bot.on('callback_query', (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;

    if (callbackQuery.data === 'done') {
        history.push({ day, balance: data[day] });

        if (data.hasOwnProperty(day + 1)) {
            bot.editMessageText("‚úÖ –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ!\n<b>–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑–∞–≤—Ç—Ä–∞ üëã</b>", { 
                chat_id: chatId, 
                message_id: msg.message_id,
                parse_mode: 'HTML' 
            });

            day += 1; // –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
        } else {
            bot.editMessageText("üéâ –í—Å—ñ –¥–Ω—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ñ—Ç–∞—é! üöÄ", { 
                chat_id: chatId, 
                message_id: msg.message_id,
                parse_mode: 'HTML' 
            });
        }
    }
});
// ------------------ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ 8:00 ------------------

cron.schedule('*/1 * * * *', () => {
    if (chatIdUser && data.hasOwnProperty(day)) {
        const opts = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: 'done' }]
                ]
            }
        };
        bot.sendMessage(chatIdUser, getDayMessage(day), opts);
    } else {
        console.log("‚ö†Ô∏è –ù–µ–º–∞—î chatId –∞–±–æ –¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
}, {
    scheduled: true,
    timezone: "Europe/Kyiv"

});



